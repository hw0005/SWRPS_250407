From a819783c7214b63bb978a89cceca72261e8f6365 Mon Sep 17 00:00:00 2001
From: "DESKTOP-SP9PDDS\\admin" <hw0005@naver.com>
Date: Mon, 7 Apr 2025 11:09:51 +0900
Subject: [PATCH] Reapply "gateway_250407"

This reverts commit 443c6e15c30d3204de4098499a2820193fda7b32.
---
 .mvn/wrapper/maven-wrapper.properties         |  19 ++
 mvnw                                          | 259 ++++++++++++++++++
 mvnw.cmd                                      | 149 ++++++++++
 pom.xml                                       | 113 ++++++++
 src/main/java/com/app/RpsgameApplication.java |  13 +
 src/main/java/com/app/common/GameResult.java  |  16 ++
 .../com/app/common/RockPaperScissors.java     |  25 ++
 src/main/java/com/app/common/RpsRule.java     |  29 ++
 .../configuration/RabbitMQConfiguration.java  |  31 +++
 .../controller/RpsChallengeController.java    |  71 +++++
 src/main/java/com/app/domain/Rps.java         |  27 ++
 .../java/com/app/domain/RpsChallenge.java     |  42 +++
 src/main/java/com/app/domain/User.java        |  25 ++
 src/main/java/com/app/dto/RequestDto.java     |   5 +
 src/main/java/com/app/dto/ResultDto.java      |   5 +
 .../java/com/app/event/EventDispatcher.java   |  28 ++
 .../java/com/app/event/RpsSolvedEvent.java    |  22 ++
 .../repository/RpsChallengeRepository.java    |  11 +
 .../com/app/repository/RpsRepository.java     |   9 +
 .../com/app/repository/UserRepository.java    |  11 +
 .../app/service/RandomGeneratorService.java   |  12 +
 src/main/java/com/app/service/RpsService.java |  67 +++++
 src/main/resources/application.properties     |  23 ++
 src/main/resources/logback-spring.xml         |  34 +++
 .../java/com/app/RpsgameApplicationTests.java |  13 +
 25 files changed, 1059 insertions(+)
 create mode 100644 .mvn/wrapper/maven-wrapper.properties
 create mode 100644 mvnw
 create mode 100644 mvnw.cmd
 create mode 100644 pom.xml
 create mode 100644 src/main/java/com/app/RpsgameApplication.java
 create mode 100644 src/main/java/com/app/common/GameResult.java
 create mode 100644 src/main/java/com/app/common/RockPaperScissors.java
 create mode 100644 src/main/java/com/app/common/RpsRule.java
 create mode 100644 src/main/java/com/app/configuration/RabbitMQConfiguration.java
 create mode 100644 src/main/java/com/app/controller/RpsChallengeController.java
 create mode 100644 src/main/java/com/app/domain/Rps.java
 create mode 100644 src/main/java/com/app/domain/RpsChallenge.java
 create mode 100644 src/main/java/com/app/domain/User.java
 create mode 100644 src/main/java/com/app/dto/RequestDto.java
 create mode 100644 src/main/java/com/app/dto/ResultDto.java
 create mode 100644 src/main/java/com/app/event/EventDispatcher.java
 create mode 100644 src/main/java/com/app/event/RpsSolvedEvent.java
 create mode 100644 src/main/java/com/app/repository/RpsChallengeRepository.java
 create mode 100644 src/main/java/com/app/repository/RpsRepository.java
 create mode 100644 src/main/java/com/app/repository/UserRepository.java
 create mode 100644 src/main/java/com/app/service/RandomGeneratorService.java
 create mode 100644 src/main/java/com/app/service/RpsService.java
 create mode 100644 src/main/resources/application.properties
 create mode 100644 src/main/resources/logback-spring.xml
 create mode 100644 src/test/java/com/app/RpsgameApplicationTests.java

diff --git a/.mvn/wrapper/maven-wrapper.properties b/.mvn/wrapper/maven-wrapper.properties
new file mode 100644
index 0000000..d58dfb7
--- /dev/null
+++ b/.mvn/wrapper/maven-wrapper.properties
@@ -0,0 +1,19 @@
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+wrapperVersion=3.3.2
+distributionType=only-script
+distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip
diff --git a/mvnw b/mvnw
new file mode 100644
index 0000000..19529dd
--- /dev/null
+++ b/mvnw
@@ -0,0 +1,259 @@
+#!/bin/sh
+# ----------------------------------------------------------------------------
+# Licensed to the Apache Software Foundation (ASF) under one
+# or more contributor license agreements.  See the NOTICE file
+# distributed with this work for additional information
+# regarding copyright ownership.  The ASF licenses this file
+# to you under the Apache License, Version 2.0 (the
+# "License"); you may not use this file except in compliance
+# with the License.  You may obtain a copy of the License at
+#
+#    http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing,
+# software distributed under the License is distributed on an
+# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+# KIND, either express or implied.  See the License for the
+# specific language governing permissions and limitations
+# under the License.
+# ----------------------------------------------------------------------------
+
+# ----------------------------------------------------------------------------
+# Apache Maven Wrapper startup batch script, version 3.3.2
+#
+# Optional ENV vars
+# -----------------
+#   JAVA_HOME - location of a JDK home dir, required when download maven via java source
+#   MVNW_REPOURL - repo url base for downloading maven distribution
+#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
+#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output
+# ----------------------------------------------------------------------------
+
+set -euf
+[ "${MVNW_VERBOSE-}" != debug ] || set -x
+
+# OS specific support.
+native_path() { printf %s\\n "$1"; }
+case "$(uname)" in
+CYGWIN* | MINGW*)
+  [ -z "${JAVA_HOME-}" ] || JAVA_HOME="$(cygpath --unix "$JAVA_HOME")"
+  native_path() { cygpath --path --windows "$1"; }
+  ;;
+esac
+
+# set JAVACMD and JAVACCMD
+set_java_home() {
+  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched
+  if [ -n "${JAVA_HOME-}" ]; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ]; then
+      # IBM's JDK on AIX uses strange locations for the executables
+      JAVACMD="$JAVA_HOME/jre/sh/java"
+      JAVACCMD="$JAVA_HOME/jre/sh/javac"
+    else
+      JAVACMD="$JAVA_HOME/bin/java"
+      JAVACCMD="$JAVA_HOME/bin/javac"
+
+      if [ ! -x "$JAVACMD" ] || [ ! -x "$JAVACCMD" ]; then
+        echo "The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run." >&2
+        echo "JAVA_HOME is set to \"$JAVA_HOME\", but \"\$JAVA_HOME/bin/java\" or \"\$JAVA_HOME/bin/javac\" does not exist." >&2
+        return 1
+      fi
+    fi
+  else
+    JAVACMD="$(
+      'set' +e
+      'unset' -f command 2>/dev/null
+      'command' -v java
+    )" || :
+    JAVACCMD="$(
+      'set' +e
+      'unset' -f command 2>/dev/null
+      'command' -v javac
+    )" || :
+
+    if [ ! -x "${JAVACMD-}" ] || [ ! -x "${JAVACCMD-}" ]; then
+      echo "The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run." >&2
+      return 1
+    fi
+  fi
+}
+
+# hash string like Java String::hashCode
+hash_string() {
+  str="${1:-}" h=0
+  while [ -n "$str" ]; do
+    char="${str%"${str#?}"}"
+    h=$(((h * 31 + $(LC_CTYPE=C printf %d "'$char")) % 4294967296))
+    str="${str#?}"
+  done
+  printf %x\\n $h
+}
+
+verbose() { :; }
+[ "${MVNW_VERBOSE-}" != true ] || verbose() { printf %s\\n "${1-}"; }
+
+die() {
+  printf %s\\n "$1" >&2
+  exit 1
+}
+
+trim() {
+  # MWRAPPER-139:
+  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.
+  #   Needed for removing poorly interpreted newline sequences when running in more
+  #   exotic environments such as mingw bash on Windows.
+  printf "%s" "${1}" | tr -d '[:space:]'
+}
+
+# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties
+while IFS="=" read -r key value; do
+  case "${key-}" in
+  distributionUrl) distributionUrl=$(trim "${value-}") ;;
+  distributionSha256Sum) distributionSha256Sum=$(trim "${value-}") ;;
+  esac
+done <"${0%/*}/.mvn/wrapper/maven-wrapper.properties"
+[ -n "${distributionUrl-}" ] || die "cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties"
+
+case "${distributionUrl##*/}" in
+maven-mvnd-*bin.*)
+  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/
+  case "${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)" in
+  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;
+  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;
+  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;
+  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;
+  *)
+    echo "Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version" >&2
+    distributionPlatform=linux-amd64
+    ;;
+  esac
+  distributionUrl="${distributionUrl%-bin.*}-$distributionPlatform.zip"
+  ;;
+maven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;
+*) MVN_CMD="mvn${0##*/mvnw}" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;
+esac
+
+# apply MVNW_REPOURL and calculate MAVEN_HOME
+# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
+[ -z "${MVNW_REPOURL-}" ] || distributionUrl="$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*"$_MVNW_REPO_PATTERN"}"
+distributionUrlName="${distributionUrl##*/}"
+distributionUrlNameMain="${distributionUrlName%.*}"
+distributionUrlNameMain="${distributionUrlNameMain%-bin}"
+MAVEN_USER_HOME="${MAVEN_USER_HOME:-${HOME}/.m2}"
+MAVEN_HOME="${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string "$distributionUrl")"
+
+exec_maven() {
+  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :
+  exec "$MAVEN_HOME/bin/$MVN_CMD" "$@" || die "cannot exec $MAVEN_HOME/bin/$MVN_CMD"
+}
+
+if [ -d "$MAVEN_HOME" ]; then
+  verbose "found existing MAVEN_HOME at $MAVEN_HOME"
+  exec_maven "$@"
+fi
+
+case "${distributionUrl-}" in
+*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;
+*) die "distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'" ;;
+esac
+
+# prepare tmp dir
+if TMP_DOWNLOAD_DIR="$(mktemp -d)" && [ -d "$TMP_DOWNLOAD_DIR" ]; then
+  clean() { rm -rf -- "$TMP_DOWNLOAD_DIR"; }
+  trap clean HUP INT TERM EXIT
+else
+  die "cannot create temp dir"
+fi
+
+mkdir -p -- "${MAVEN_HOME%/*}"
+
+# Download and Install Apache Maven
+verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
+verbose "Downloading from: $distributionUrl"
+verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"
+
+# select .zip or .tar.gz
+if ! command -v unzip >/dev/null; then
+  distributionUrl="${distributionUrl%.zip}.tar.gz"
+  distributionUrlName="${distributionUrl##*/}"
+fi
+
+# verbose opt
+__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''
+[ "${MVNW_VERBOSE-}" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v
+
+# normalize http auth
+case "${MVNW_PASSWORD:+has-password}" in
+'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;
+has-password) [ -n "${MVNW_USERNAME-}" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;
+esac
+
+if [ -z "${MVNW_USERNAME-}" ] && command -v wget >/dev/null; then
+  verbose "Found wget ... using wget"
+  wget ${__MVNW_QUIET_WGET:+"$__MVNW_QUIET_WGET"} "$distributionUrl" -O "$TMP_DOWNLOAD_DIR/$distributionUrlName" || die "wget: Failed to fetch $distributionUrl"
+elif [ -z "${MVNW_USERNAME-}" ] && command -v curl >/dev/null; then
+  verbose "Found curl ... using curl"
+  curl ${__MVNW_QUIET_CURL:+"$__MVNW_QUIET_CURL"} -f -L -o "$TMP_DOWNLOAD_DIR/$distributionUrlName" "$distributionUrl" || die "curl: Failed to fetch $distributionUrl"
+elif set_java_home; then
+  verbose "Falling back to use Java to download"
+  javaSource="$TMP_DOWNLOAD_DIR/Downloader.java"
+  targetZip="$TMP_DOWNLOAD_DIR/$distributionUrlName"
+  cat >"$javaSource" <<-END
+	public class Downloader extends java.net.Authenticator
+	{
+	  protected java.net.PasswordAuthentication getPasswordAuthentication()
+	  {
+	    return new java.net.PasswordAuthentication( System.getenv( "MVNW_USERNAME" ), System.getenv( "MVNW_PASSWORD" ).toCharArray() );
+	  }
+	  public static void main( String[] args ) throws Exception
+	  {
+	    setDefault( new Downloader() );
+	    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );
+	  }
+	}
+	END
+  # For Cygwin/MinGW, switch paths to Windows format before running javac and java
+  verbose " - Compiling Downloader.java ..."
+  "$(native_path "$JAVACCMD")" "$(native_path "$javaSource")" || die "Failed to compile Downloader.java"
+  verbose " - Running Downloader.java ..."
+  "$(native_path "$JAVACMD")" -cp "$(native_path "$TMP_DOWNLOAD_DIR")" Downloader "$distributionUrl" "$(native_path "$targetZip")"
+fi
+
+# If specified, validate the SHA-256 sum of the Maven distribution zip file
+if [ -n "${distributionSha256Sum-}" ]; then
+  distributionSha256Result=false
+  if [ "$MVN_CMD" = mvnd.sh ]; then
+    echo "Checksum validation is not supported for maven-mvnd." >&2
+    echo "Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
+    exit 1
+  elif command -v sha256sum >/dev/null; then
+    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | sha256sum -c >/dev/null 2>&1; then
+      distributionSha256Result=true
+    fi
+  elif command -v shasum >/dev/null; then
+    if echo "$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName" | shasum -a 256 -c >/dev/null 2>&1; then
+      distributionSha256Result=true
+    fi
+  else
+    echo "Checksum validation was requested but neither 'sha256sum' or 'shasum' are available." >&2
+    echo "Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties." >&2
+    exit 1
+  fi
+  if [ $distributionSha256Result = false ]; then
+    echo "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised." >&2
+    echo "If you updated your Maven version, you need to update the specified distributionSha256Sum property." >&2
+    exit 1
+  fi
+fi
+
+# unzip and move
+if command -v unzip >/dev/null; then
+  unzip ${__MVNW_QUIET_UNZIP:+"$__MVNW_QUIET_UNZIP"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -d "$TMP_DOWNLOAD_DIR" || die "failed to unzip"
+else
+  tar xzf${__MVNW_QUIET_TAR:+"$__MVNW_QUIET_TAR"} "$TMP_DOWNLOAD_DIR/$distributionUrlName" -C "$TMP_DOWNLOAD_DIR" || die "failed to untar"
+fi
+printf %s\\n "$distributionUrl" >"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url"
+mv -- "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" "$MAVEN_HOME" || [ -d "$MAVEN_HOME" ] || die "fail to move MAVEN_HOME"
+
+clean || :
+exec_maven "$@"
diff --git a/mvnw.cmd b/mvnw.cmd
new file mode 100644
index 0000000..249bdf3
--- /dev/null
+++ b/mvnw.cmd
@@ -0,0 +1,149 @@
+<# : batch portion
+@REM ----------------------------------------------------------------------------
+@REM Licensed to the Apache Software Foundation (ASF) under one
+@REM or more contributor license agreements.  See the NOTICE file
+@REM distributed with this work for additional information
+@REM regarding copyright ownership.  The ASF licenses this file
+@REM to you under the Apache License, Version 2.0 (the
+@REM "License"); you may not use this file except in compliance
+@REM with the License.  You may obtain a copy of the License at
+@REM
+@REM    http://www.apache.org/licenses/LICENSE-2.0
+@REM
+@REM Unless required by applicable law or agreed to in writing,
+@REM software distributed under the License is distributed on an
+@REM "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
+@REM KIND, either express or implied.  See the License for the
+@REM specific language governing permissions and limitations
+@REM under the License.
+@REM ----------------------------------------------------------------------------
+
+@REM ----------------------------------------------------------------------------
+@REM Apache Maven Wrapper startup batch script, version 3.3.2
+@REM
+@REM Optional ENV vars
+@REM   MVNW_REPOURL - repo url base for downloading maven distribution
+@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven
+@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output
+@REM ----------------------------------------------------------------------------
+
+@IF "%__MVNW_ARG0_NAME__%"=="" (SET __MVNW_ARG0_NAME__=%~nx0)
+@SET __MVNW_CMD__=
+@SET __MVNW_ERROR__=
+@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%
+@SET PSModulePath=
+@FOR /F "usebackq tokens=1* delims==" %%A IN (`powershell -noprofile "& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}"`) DO @(
+  IF "%%A"=="MVN_CMD" (set __MVNW_CMD__=%%B) ELSE IF "%%B"=="" (echo %%A) ELSE (echo %%A=%%B)
+)
+@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%
+@SET __MVNW_PSMODULEP_SAVE=
+@SET __MVNW_ARG0_NAME__=
+@SET MVNW_USERNAME=
+@SET MVNW_PASSWORD=
+@IF NOT "%__MVNW_CMD__%"=="" (%__MVNW_CMD__% %*)
+@echo Cannot start maven from wrapper >&2 && exit /b 1
+@GOTO :EOF
+: end batch / begin powershell #>
+
+$ErrorActionPreference = "Stop"
+if ($env:MVNW_VERBOSE -eq "true") {
+  $VerbosePreference = "Continue"
+}
+
+# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties
+$distributionUrl = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionUrl
+if (!$distributionUrl) {
+  Write-Error "cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties"
+}
+
+switch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {
+  "maven-mvnd-*" {
+    $USE_MVND = $true
+    $distributionUrl = $distributionUrl -replace '-bin\.[^.]*$',"-windows-amd64.zip"
+    $MVN_CMD = "mvnd.cmd"
+    break
+  }
+  default {
+    $USE_MVND = $false
+    $MVN_CMD = $script -replace '^mvnw','mvn'
+    break
+  }
+}
+
+# apply MVNW_REPOURL and calculate MAVEN_HOME
+# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>
+if ($env:MVNW_REPOURL) {
+  $MVNW_REPO_PATTERN = if ($USE_MVND) { "/org/apache/maven/" } else { "/maven/mvnd/" }
+  $distributionUrl = "$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')"
+}
+$distributionUrlName = $distributionUrl -replace '^.*/',''
+$distributionUrlNameMain = $distributionUrlName -replace '\.[^.]*$','' -replace '-bin$',''
+$MAVEN_HOME_PARENT = "$HOME/.m2/wrapper/dists/$distributionUrlNameMain"
+if ($env:MAVEN_USER_HOME) {
+  $MAVEN_HOME_PARENT = "$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain"
+}
+$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString("x2")}) -join ''
+$MAVEN_HOME = "$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME"
+
+if (Test-Path -Path "$MAVEN_HOME" -PathType Container) {
+  Write-Verbose "found existing MAVEN_HOME at $MAVEN_HOME"
+  Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
+  exit $?
+}
+
+if (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {
+  Write-Error "distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl"
+}
+
+# prepare tmp dir
+$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile
+$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path "$TMP_DOWNLOAD_DIR_HOLDER.dir"
+$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null
+trap {
+  if ($TMP_DOWNLOAD_DIR.Exists) {
+    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
+    catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
+  }
+}
+
+New-Item -Itemtype Directory -Path "$MAVEN_HOME_PARENT" -Force | Out-Null
+
+# Download and Install Apache Maven
+Write-Verbose "Couldn't find MAVEN_HOME, downloading and installing it ..."
+Write-Verbose "Downloading from: $distributionUrl"
+Write-Verbose "Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName"
+
+$webclient = New-Object System.Net.WebClient
+if ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {
+  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)
+}
+[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
+$webclient.DownloadFile($distributionUrl, "$TMP_DOWNLOAD_DIR/$distributionUrlName") | Out-Null
+
+# If specified, validate the SHA-256 sum of the Maven distribution zip file
+$distributionSha256Sum = (Get-Content -Raw "$scriptDir/.mvn/wrapper/maven-wrapper.properties" | ConvertFrom-StringData).distributionSha256Sum
+if ($distributionSha256Sum) {
+  if ($USE_MVND) {
+    Write-Error "Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties."
+  }
+  Import-Module $PSHOME\Modules\Microsoft.PowerShell.Utility -Function Get-FileHash
+  if ((Get-FileHash "$TMP_DOWNLOAD_DIR/$distributionUrlName" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {
+    Write-Error "Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property."
+  }
+}
+
+# unzip and move
+Expand-Archive "$TMP_DOWNLOAD_DIR/$distributionUrlName" -DestinationPath "$TMP_DOWNLOAD_DIR" | Out-Null
+Rename-Item -Path "$TMP_DOWNLOAD_DIR/$distributionUrlNameMain" -NewName $MAVEN_HOME_NAME | Out-Null
+try {
+  Move-Item -Path "$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME" -Destination $MAVEN_HOME_PARENT | Out-Null
+} catch {
+  if (! (Test-Path -Path "$MAVEN_HOME" -PathType Container)) {
+    Write-Error "fail to move MAVEN_HOME"
+  }
+} finally {
+  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }
+  catch { Write-Warning "Cannot remove $TMP_DOWNLOAD_DIR" }
+}
+
+Write-Output "MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD"
diff --git a/pom.xml b/pom.xml
new file mode 100644
index 0000000..e4ac3e2
--- /dev/null
+++ b/pom.xml
@@ -0,0 +1,113 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
+	<modelVersion>4.0.0</modelVersion>
+	<parent>
+		<groupId>org.springframework.boot</groupId>
+		<artifactId>spring-boot-starter-parent</artifactId>
+		<version>3.4.4</version>
+		<relativePath/> <!-- lookup parent from repository -->
+	</parent>
+	<groupId>com.app</groupId>
+	<artifactId>rpsgame</artifactId>
+	<version>0.0.1-SNAPSHOT</version>
+	<name>rpsgame</name>
+	<description>Demo project for Spring Boot</description>
+	<url/>
+	<licenses>
+		<license/>
+	</licenses>
+	<developers>
+		<developer/>
+	</developers>
+	<scm>
+		<connection/>
+		<developerConnection/>
+		<tag/>
+		<url/>
+	</scm>
+	<properties>
+		<java.version>21</java.version>
+		<spring-cloud.version>2024.0.1</spring-cloud.version>
+	</properties>
+	<dependencies>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-data-jpa</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-web</artifactId>
+		</dependency>
+
+		<dependency>
+			<groupId>com.mysql</groupId>
+			<artifactId>mysql-connector-j</artifactId>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.projectlombok</groupId>
+			<artifactId>lombok</artifactId>
+			<optional>true</optional>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-test</artifactId>
+			<scope>test</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-amqp</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.boot</groupId>
+			<artifactId>spring-boot-starter-actuator</artifactId>
+		</dependency>
+		<dependency>
+			<groupId>org.springframework.cloud</groupId>
+			<artifactId>spring-cloud-starter-consul-discovery</artifactId>
+		</dependency>
+	</dependencies>
+
+	<dependencyManagement>
+		<dependencies>
+			<dependency>
+				<groupId>org.springframework.cloud</groupId>
+				<artifactId>spring-cloud-dependencies</artifactId>
+				<version>${spring-cloud.version}</version>
+				<type>pom</type>
+				<scope>import</scope>
+			</dependency>
+		</dependencies>
+	</dependencyManagement>
+
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-compiler-plugin</artifactId>
+				<configuration>
+					<annotationProcessorPaths>
+						<path>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+						</path>
+					</annotationProcessorPaths>
+				</configuration>
+			</plugin>
+			<plugin>
+				<groupId>org.springframework.boot</groupId>
+				<artifactId>spring-boot-maven-plugin</artifactId>
+				<configuration>
+					<excludes>
+						<exclude>
+							<groupId>org.projectlombok</groupId>
+							<artifactId>lombok</artifactId>
+						</exclude>
+					</excludes>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
+
+</project>
diff --git a/src/main/java/com/app/RpsgameApplication.java b/src/main/java/com/app/RpsgameApplication.java
new file mode 100644
index 0000000..c003203
--- /dev/null
+++ b/src/main/java/com/app/RpsgameApplication.java
@@ -0,0 +1,13 @@
+package com.app;
+
+import org.springframework.boot.SpringApplication;
+import org.springframework.boot.autoconfigure.SpringBootApplication;
+
+@SpringBootApplication
+public class RpsgameApplication {
+
+	public static void main(String[] args) {
+		SpringApplication.run(RpsgameApplication.class, args);
+	}
+
+}
diff --git a/src/main/java/com/app/common/GameResult.java b/src/main/java/com/app/common/GameResult.java
new file mode 100644
index 0000000..7131888
--- /dev/null
+++ b/src/main/java/com/app/common/GameResult.java
@@ -0,0 +1,16 @@
+package com.app.common;
+
+public enum GameResult {
+	WON("승"), LOST("패"), TIE("비김");
+	
+	private String commentary;
+	
+	private GameResult(String content) {
+		this.commentary = content;
+	}
+	
+	public String getCommentary() {
+		return commentary;
+	}
+	
+}
diff --git a/src/main/java/com/app/common/RockPaperScissors.java b/src/main/java/com/app/common/RockPaperScissors.java
new file mode 100644
index 0000000..da4081f
--- /dev/null
+++ b/src/main/java/com/app/common/RockPaperScissors.java
@@ -0,0 +1,25 @@
+package com.app.common;
+
+import java.util.Random;
+
+public enum RockPaperScissors {
+	ROCK("바위"), PAPER("보"), SCISSORS("가위");
+	
+	private String commentary;
+	
+	private RockPaperScissors(String commentary) {
+		this.commentary = commentary;
+	}
+	
+	public String getCommentary() {
+		return commentary;
+	}
+	
+	private static final Random PRNG = new Random();
+	
+	public static RockPaperScissors randomRps() {
+		RockPaperScissors[] rpsArray = values();
+		return rpsArray[PRNG.nextInt(rpsArray.length)];
+	}
+	
+}
diff --git a/src/main/java/com/app/common/RpsRule.java b/src/main/java/com/app/common/RpsRule.java
new file mode 100644
index 0000000..f08f977
--- /dev/null
+++ b/src/main/java/com/app/common/RpsRule.java
@@ -0,0 +1,29 @@
+package com.app.common;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public class RpsRule {
+	private static Map<RockPaperScissors, GameResult> userRock = new HashMap<>();
+	private static Map<RockPaperScissors, GameResult> userpaper = new HashMap<>();
+	private static Map<RockPaperScissors, GameResult> userScissors = new HashMap<>();
+	public static Map<RockPaperScissors, Map<RockPaperScissors, GameResult>> checkMap = new HashMap<>();
+
+	static {
+		userRock.put(RockPaperScissors.PAPER, GameResult.LOST);
+		userRock.put(RockPaperScissors.ROCK, GameResult.TIE);
+		userRock.put(RockPaperScissors.SCISSORS, GameResult.WON);
+
+		userpaper.put(RockPaperScissors.PAPER, GameResult.TIE);
+		userpaper.put(RockPaperScissors.ROCK, GameResult.WON);
+		userpaper.put(RockPaperScissors.SCISSORS, GameResult.LOST);
+
+		userScissors.put(RockPaperScissors.PAPER, GameResult.WON);
+		userScissors.put(RockPaperScissors.ROCK, GameResult.LOST);
+		userScissors.put(RockPaperScissors.SCISSORS, GameResult.TIE);
+
+		checkMap.put(RockPaperScissors.ROCK, userRock);
+		checkMap.put(RockPaperScissors.PAPER, userpaper);
+		checkMap.put(RockPaperScissors.SCISSORS, userScissors);
+	}
+}
diff --git a/src/main/java/com/app/configuration/RabbitMQConfiguration.java b/src/main/java/com/app/configuration/RabbitMQConfiguration.java
new file mode 100644
index 0000000..087f261
--- /dev/null
+++ b/src/main/java/com/app/configuration/RabbitMQConfiguration.java
@@ -0,0 +1,31 @@
+package com.app.configuration;
+
+import org.springframework.amqp.core.TopicExchange;
+import org.springframework.amqp.rabbit.connection.ConnectionFactory;
+import org.springframework.amqp.rabbit.core.RabbitTemplate;
+import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+public class RabbitMQConfiguration {
+	@Bean
+	TopicExchange rpsExchange(@Value("${spring.rabbitmq.template.exchange}") final String exchangeName) {
+		return new TopicExchange(exchangeName);
+	}
+
+	// JSON 메시지 컨버터를 가지는 RabbitTemplate 생성
+	@Bean
+	RabbitTemplate rabbitTemplate(final ConnectionFactory connectionFactory) {
+		final RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
+		rabbitTemplate.setMessageConverter(producerJackson2MessageConverter());
+		return rabbitTemplate;
+	}
+
+	// Java 객체를 JSON으로 직렬화
+	@Bean
+	Jackson2JsonMessageConverter producerJackson2MessageConverter() {
+		return new Jackson2JsonMessageConverter();
+	}
+}
diff --git a/src/main/java/com/app/controller/RpsChallengeController.java b/src/main/java/com/app/controller/RpsChallengeController.java
new file mode 100644
index 0000000..91cb397
--- /dev/null
+++ b/src/main/java/com/app/controller/RpsChallengeController.java
@@ -0,0 +1,71 @@
+package com.app.controller;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PostMapping;
+import org.springframework.web.bind.annotation.RequestBody;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RequestParam;
+import org.springframework.web.bind.annotation.RestController;
+
+import com.app.common.RockPaperScissors;
+import com.app.domain.Rps;
+import com.app.domain.RpsChallenge;
+import com.app.domain.User;
+import com.app.dto.RequestDto;
+import com.app.dto.ResultDto;
+import com.app.service.RpsService;
+
+import lombok.RequiredArgsConstructor;
+import lombok.extern.slf4j.Slf4j;
+
+@Slf4j
+@RequiredArgsConstructor
+@RestController
+@RequestMapping("/results")
+public class RpsChallengeController {
+	private final RpsService rpsService;
+	
+	private RockPaperScissors stringToRockPaperScissors(String code) {
+		RockPaperScissors result = null;
+		for (RockPaperScissors rps : RockPaperScissors.values()) {
+			log.info("RockPaperScissors value: " + rps.getCommentary());
+			if (rps.getCommentary().equals(code)) {
+				result = rps;
+				break;
+			}
+		}
+		return result;
+	}
+	
+	@PostMapping
+	Map<String, String> postResult(@RequestBody RequestDto dto) {
+		User user = new User(dto.userAlias());
+		log.info("userChoice: " + dto.userChoice());
+		Rps rps = new Rps(stringToRockPaperScissors(dto.userChoice()));
+		
+		RpsChallenge rpsChallenge = new RpsChallenge(user, rps, null, null);
+		Map<String, String> map = rpsService.checkChallenge(rpsChallenge);
+		log.info("outcome: " + map.get("outcome"));
+		log.info("opponent: " + map.get("opponent"));
+		return map;
+	}
+	
+	@GetMapping
+	List<ResultDto> getStatistics(@RequestParam String alias) {
+		List<RpsChallenge> challenges = rpsService.getStatsForUser(alias);
+		List<ResultDto> results = new ArrayList<ResultDto>();
+		log.info("getStatistics results size: " + results.size());
+		for (RpsChallenge challenge : challenges) {
+			ResultDto result = new ResultDto(challenge.getId(), challenge.getRps().getChallenge().getCommentary(),
+					challenge.getOpponent().getCommentary(), challenge.getGameResult().getCommentary(),
+					challenge.getUser().getId());
+			results.add(result);
+		}
+		return results;
+	}
+	
+}
diff --git a/src/main/java/com/app/domain/Rps.java b/src/main/java/com/app/domain/Rps.java
new file mode 100644
index 0000000..2271127
--- /dev/null
+++ b/src/main/java/com/app/domain/Rps.java
@@ -0,0 +1,27 @@
+package com.app.domain;
+
+import com.app.common.RockPaperScissors;
+
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import lombok.Data;
+import lombok.RequiredArgsConstructor;
+
+@Data
+@Entity
+@RequiredArgsConstructor
+public class Rps {
+	@Id
+	@GeneratedValue(strategy = GenerationType.IDENTITY)
+	@Column(name="rsplay_id")
+	private long id;
+	
+	private final RockPaperScissors challenge;
+	
+	Rps() {
+		this(null);
+	}
+}
diff --git a/src/main/java/com/app/domain/RpsChallenge.java b/src/main/java/com/app/domain/RpsChallenge.java
new file mode 100644
index 0000000..1d81f85
--- /dev/null
+++ b/src/main/java/com/app/domain/RpsChallenge.java
@@ -0,0 +1,42 @@
+package com.app.domain;
+
+import com.app.common.GameResult;
+import com.app.common.RockPaperScissors;
+
+import jakarta.persistence.CascadeType;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import jakarta.persistence.JoinColumn;
+import jakarta.persistence.ManyToOne;
+import lombok.Data;
+import lombok.RequiredArgsConstructor;
+
+@Data
+@Entity
+@RequiredArgsConstructor
+public class RpsChallenge {
+	@Id
+	@GeneratedValue(strategy = GenerationType.IDENTITY)
+	private Long id;
+	
+	@ManyToOne(cascade = CascadeType.PERSIST)
+	@JoinColumn(name = "user_id")
+	private final User user;
+	
+	@ManyToOne(cascade = CascadeType.PERSIST)
+	@JoinColumn(name = "rpslay_id")
+	private final Rps rps;
+	
+	private final RockPaperScissors opponent;
+	
+	private final GameResult gameResult;
+	
+	RpsChallenge() {
+		user = null;
+		rps = null;
+		opponent = null;
+		gameResult = null;
+	}
+}
diff --git a/src/main/java/com/app/domain/User.java b/src/main/java/com/app/domain/User.java
new file mode 100644
index 0000000..eec095d
--- /dev/null
+++ b/src/main/java/com/app/domain/User.java
@@ -0,0 +1,25 @@
+package com.app.domain;
+
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import lombok.Data;
+import lombok.RequiredArgsConstructor;
+
+@Data
+@Entity
+@RequiredArgsConstructor
+public class User {
+	@Id
+	@GeneratedValue(strategy = GenerationType.IDENTITY)
+	@Column(name="user_id")
+	private Long id;
+	
+	private final String alias;
+	
+	User() {
+		alias = null;
+	}
+}
diff --git a/src/main/java/com/app/dto/RequestDto.java b/src/main/java/com/app/dto/RequestDto.java
new file mode 100644
index 0000000..048df0a
--- /dev/null
+++ b/src/main/java/com/app/dto/RequestDto.java
@@ -0,0 +1,5 @@
+package com.app.dto;
+
+public record RequestDto(String userAlias, String userChoice) {
+
+}
diff --git a/src/main/java/com/app/dto/ResultDto.java b/src/main/java/com/app/dto/ResultDto.java
new file mode 100644
index 0000000..4e225a3
--- /dev/null
+++ b/src/main/java/com/app/dto/ResultDto.java
@@ -0,0 +1,5 @@
+package com.app.dto;
+
+public record ResultDto(Long id, String user, String opponent, String outcome, Long userId) {
+	
+}
diff --git a/src/main/java/com/app/event/EventDispatcher.java b/src/main/java/com/app/event/EventDispatcher.java
new file mode 100644
index 0000000..9c2e971
--- /dev/null
+++ b/src/main/java/com/app/event/EventDispatcher.java
@@ -0,0 +1,28 @@
+package com.app.event;
+
+import org.springframework.amqp.rabbit.core.RabbitTemplate;
+import org.springframework.beans.factory.annotation.Value;
+import org.springframework.stereotype.Component;
+
+@Component
+public class EventDispatcher {
+	private final RabbitTemplate rabbitTemplate;
+
+	// Rps 관련 정보를 전달하기 위한 익스체인지
+	private final String rpsExchange;
+
+	// 특정 이벤트를 전송하기 위한 라우팅 키
+	private final String rpsSolvedRoutingKey;
+
+	EventDispatcher(final RabbitTemplate rabbitTemplate,
+			@Value("${spring.rabbitmq.template.exchange}") final String rpsExchange,
+			@Value("${spring.rabbitmq.template.routing-key}") final String rpsSolvedRoutingKey) {
+		this.rabbitTemplate = rabbitTemplate;
+		this.rpsExchange = rpsExchange;
+		this.rpsSolvedRoutingKey = rpsSolvedRoutingKey;
+	}
+
+	public void send(final RpsSolvedEvent rpsSolvedEvent) {
+		rabbitTemplate.convertAndSend(rpsExchange, rpsSolvedRoutingKey, rpsSolvedEvent);
+	}
+}
diff --git a/src/main/java/com/app/event/RpsSolvedEvent.java b/src/main/java/com/app/event/RpsSolvedEvent.java
new file mode 100644
index 0000000..7a11b09
--- /dev/null
+++ b/src/main/java/com/app/event/RpsSolvedEvent.java
@@ -0,0 +1,22 @@
+package com.app.event;
+
+import java.io.Serializable;
+
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.RequiredArgsConstructor;
+import lombok.ToString;
+
+@RequiredArgsConstructor
+@Getter
+@ToString
+@EqualsAndHashCode
+public class RpsSolvedEvent implements Serializable{
+	private static final long serialVersionUID = 570201864291530592L;
+	
+	private final Long rpsChallengeId;
+	private final Long userId;
+	private final String alias;
+	private final String outcome;
+	
+}
diff --git a/src/main/java/com/app/repository/RpsChallengeRepository.java b/src/main/java/com/app/repository/RpsChallengeRepository.java
new file mode 100644
index 0000000..20d08cb
--- /dev/null
+++ b/src/main/java/com/app/repository/RpsChallengeRepository.java
@@ -0,0 +1,11 @@
+package com.app.repository;
+
+import java.util.List;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import com.app.domain.RpsChallenge;
+
+public interface RpsChallengeRepository extends JpaRepository<RpsChallenge, Long>{
+	List<RpsChallenge> findTop5ByUserAliasOrderByIdDesc(String userAlias);
+}
diff --git a/src/main/java/com/app/repository/RpsRepository.java b/src/main/java/com/app/repository/RpsRepository.java
new file mode 100644
index 0000000..e4f2a21
--- /dev/null
+++ b/src/main/java/com/app/repository/RpsRepository.java
@@ -0,0 +1,9 @@
+package com.app.repository;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import com.app.domain.Rps;
+
+public interface RpsRepository extends JpaRepository<Rps, Long>{
+	
+}
diff --git a/src/main/java/com/app/repository/UserRepository.java b/src/main/java/com/app/repository/UserRepository.java
new file mode 100644
index 0000000..1c8a774
--- /dev/null
+++ b/src/main/java/com/app/repository/UserRepository.java
@@ -0,0 +1,11 @@
+package com.app.repository;
+
+import java.util.Optional;
+
+import org.springframework.data.jpa.repository.JpaRepository;
+
+import com.app.domain.User;
+
+public interface UserRepository extends JpaRepository<User, Long>{
+	Optional<User> findByAlias(final String alias);
+}
diff --git a/src/main/java/com/app/service/RandomGeneratorService.java b/src/main/java/com/app/service/RandomGeneratorService.java
new file mode 100644
index 0000000..4340e9c
--- /dev/null
+++ b/src/main/java/com/app/service/RandomGeneratorService.java
@@ -0,0 +1,12 @@
+package com.app.service;
+
+import org.springframework.stereotype.Service;
+
+import com.app.common.RockPaperScissors;
+
+@Service
+public class RandomGeneratorService {
+	public RockPaperScissors getRockPaperScissors() {
+		return RockPaperScissors.randomRps();
+	}
+}
diff --git a/src/main/java/com/app/service/RpsService.java b/src/main/java/com/app/service/RpsService.java
new file mode 100644
index 0000000..cfdf9e2
--- /dev/null
+++ b/src/main/java/com/app/service/RpsService.java
@@ -0,0 +1,67 @@
+package com.app.service;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+
+import org.springframework.stereotype.Service;
+import org.springframework.util.Assert;
+
+import com.app.common.GameResult;
+import com.app.common.RockPaperScissors;
+import com.app.common.RpsRule;
+import com.app.domain.RpsChallenge;
+import com.app.domain.User;
+import com.app.event.EventDispatcher;
+import com.app.event.RpsSolvedEvent;
+import com.app.repository.RpsChallengeRepository;
+import com.app.repository.UserRepository;
+
+import jakarta.transaction.Transactional;
+import lombok.RequiredArgsConstructor;
+
+@RequiredArgsConstructor
+@Service
+public class RpsService {
+
+    private final RpsChallengeRepository rpsChallengeRepository;
+	private final RandomGeneratorService randomGeneratorService;
+	private final UserRepository userRepository;
+	private final EventDispatcher eventDispatcher;
+
+	private RockPaperScissors createRandomRps() {
+		return randomGeneratorService.getRockPaperScissors();
+	}
+	
+	private GameResult checkScore(RockPaperScissors userRps, RockPaperScissors computerRps) {
+		return RpsRule.checkMap.get(userRps).get(computerRps);
+	}
+	
+	@Transactional
+	public Map<String, String> checkChallenge(RpsChallenge rpsChallenge) {
+		Map<String, String> map = new HashMap<String, String>();
+		Optional<User> user = userRepository.findByAlias(rpsChallenge.getUser().getAlias());
+				
+		Assert.isNull(rpsChallenge.getGameResult(), "완료된 상태를 보낼 수 없습니다!!!");
+		RockPaperScissors computerChoice = createRandomRps();
+		GameResult gameResult = checkScore(rpsChallenge.getRps().getChallenge(), computerChoice);
+		
+		RpsChallenge checkedChallenge = new RpsChallenge(user.orElse(rpsChallenge.getUser()), rpsChallenge.getRps(), computerChoice, gameResult);
+		
+		rpsChallengeRepository.save(checkedChallenge);
+		
+		eventDispatcher.send(new RpsSolvedEvent(checkedChallenge.getId(), checkedChallenge.getUser().getId(), checkedChallenge.getUser().getAlias()
+				, checkedChallenge.getGameResult().getCommentary()));
+		
+		
+		map.put("opponent", computerChoice.getCommentary());
+		map.put("outcome", checkedChallenge.getGameResult().getCommentary());
+		map.put("userId", "" + checkedChallenge.getUser().getId());
+		return map;
+	}
+	
+	public List<RpsChallenge> getStatsForUser(String userAlias) {
+		return rpsChallengeRepository.findTop5ByUserAliasOrderByIdDesc(userAlias);
+	}
+}
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
new file mode 100644
index 0000000..b15ada0
--- /dev/null
+++ b/src/main/resources/application.properties
@@ -0,0 +1,23 @@
+spring.application.name=rpsgame
+
+#Server
+server.port=8080
+server.servlet.session.timeout=60m
+
+#Database config
+spring.datasource.url=jdbc:mysql://localhost:3306/rps_db?allowPublicKeyRetrieval=true&useSSL=false&characterEncoding=UTF-8&serverTimezone=Asia/Seoul&allowMultiQueries=true
+spring.datasource.username=spring
+spring.datasource.password=1234
+spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
+
+#spring Data JPA
+spring.jpa.database=mysql
+spring.jpa.hibernate.ddl-auto=update
+spring.jpa.generate-ddl=true
+spring.jpa.properties.hibernate.format_sql=true
+spring.jpa.properties.hibernate.show_sql=true
+logging.level.org.hibernate=info
+
+# RabbitMQ 설정
+spring.rabbitmq.template.exchange=rps_exchange
+spring.rabbitmq.template.routing-key=rps.solved
\ No newline at end of file
diff --git a/src/main/resources/logback-spring.xml b/src/main/resources/logback-spring.xml
new file mode 100644
index 0000000..b561da1
--- /dev/null
+++ b/src/main/resources/logback-spring.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<configuration>
+<!-- C:\Temp\logs-->
+	<property name="LOG_PATH" value="C:/Temps/logs" />
+
+	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
+		<target>System.out</target>
+		<encoder>
+			<pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] [%-5level] %logger{35} - %msg%n</pattern>
+		</encoder>
+	</appender>
+	<appender name="ROLLING" class="ch.qos.logback.core.rolling.RollingFileAppender">
+		<file>${LOG_PATH}/logback.log</file>
+		<append>true</append>
+		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
+			<pattern>[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] [%-5level] %logger{35} - %msg%n</pattern>
+		</encoder>
+		<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
+        	<level>INFO</level>
+    	</filter>
+	<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
+		<fileNamePattern>${LOG_PATH}/logback.%d{yyyy-MM-dd}.%i.log.zip
+		</fileNamePattern>
+		<maxFileSize>5MB</maxFileSize>
+		<maxHistory>30</maxHistory>
+	</rollingPolicy>
+	</appender>
+
+
+	<root level="debug">
+		<appender-ref ref="ROLLING" />
+		<appender-ref ref="STDOUT" />
+	</root>
+</configuration>
\ No newline at end of file
diff --git a/src/test/java/com/app/RpsgameApplicationTests.java b/src/test/java/com/app/RpsgameApplicationTests.java
new file mode 100644
index 0000000..c5d5324
--- /dev/null
+++ b/src/test/java/com/app/RpsgameApplicationTests.java
@@ -0,0 +1,13 @@
+package com.app;
+
+import org.junit.jupiter.api.Test;
+import org.springframework.boot.test.context.SpringBootTest;
+
+@SpringBootTest
+class RpsgameApplicationTests {
+
+	@Test
+	void contextLoads() {
+	}
+
+}
-- 
2.46.0.windows.1

